I tried to do exactly the same, it's not possible to have both whitebox tests and module test-dependencies __with your project structure__, but I think I found an alternative structure that does 90% of what you want to do:

1/ The problem with whitebox testing is that it works with module patching, because JPMS has not notion of test VS main unlike Maven. So this provokes problems like not working with test-dependencies, or having to pollute your module-info with test dependencies.

2/ So then, why not keep doing whitebox testing, but with the maven structure of  blackbox testing, that is: split each module X into X and X-test. Only X has a module-info.java, tests run in the classpath so you skip all these issues. The only drawbacks I can think of are (in order of increasing importance):
-that the test jar will not be modularized, but I think that is acceptable (at least for now)
-that you have twice the number of maven modules, and you might not like separating tests in another maven module
-tests will not exercise JPMS, and it's always bad to run tests in a different environment (for instance if you use module services, I dunno how you could test that. also on principle there could be differences in behaviour). This could maybe be mitigated by smoke tests or by a dedicated integration tests module? By the way (if that's what you're doing) I doubt it's worth it modularizing eg. a spring boot app as spring itself is not modularized yet, so you will pay the cost but reap few benefits (but if you're writing a lib that's a different story).

You can find an example here:
a/ Get the example:
git clone https://github.com/vandekeiser/ddd-metamodel.git
git checkout https://github.com/vandekeiser/ddd-metamodel.git

b/ Look at the example:
-fr.cla.ddd.metamodel depends on fr.cla.ddd.oo (but no module-info for the tests maven modules)
-I do whitebox testing in PackagePrivateOoTest and in PackagePrivateMetamodelTest
-I have a test-depency OoTestDependency