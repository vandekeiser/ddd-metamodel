-N sujets:
    -equatable
    -modules + whitebox testing + test-dependencies
    -DDD metamodel (E/Vo/DDD)
    -DDD walking skel
    -DDD walking skel spring et tt


modules + whitebox testing:
    requires java.logging;
    --> split en blackbox
    "[ERROR] the unnamed module
    reads package com.pholser.junit.quickcheck.generator
    from both junit.quickcheck.generators and junit.quickcheck.core"
    -->peut pas utiliser le module path si split package ds 1 des libs..
    jdeps -s out
    https://stackoverflow.com/questions/53477690/properly-implementing-java-modules-in-a-maven-build-with-inter-module-test-depen/55635924#55635924


TODOs:
    -meilleurs exemple d'equatables? (ex. cf. EJ pr CE?)
    -factor types ds openapi
    -fix jigsaw runtime warning (wasn't here with j11)
    -Constraint.messageIfViolated: String -> Supplier<String> pr ouvrir la porte à de l'interpolation
    -split AbstractValidationEx -> global/individual? mais et le app-level?
    -tst de concurrence/agregat!
    -documenter les choix/trafeoffs:
        -choix structurants:
            -4 layers au lieu de 2
            -"top-level domain class" pr verifs par le compilateur plutot que dependant d'un outil tiers; vf le nom ds POEAA.
                -stabilité de l'identité (vs. generation tardive)
                -semantique egalité pb souvent raté en java et souvent problematique en jpa
                -approche ddd defensif
                -pas d'annots, persistence.xml ds infra
            -on autorise les getters, le pattern interest/inform n'ayant pas ds mon xp été probante
            -typologie des tests par layer
            -typologie de la validation par layer
            -metamodele pr découverte documentation
        -documenter de façon centralisée les //TODO eqh
        -(ref eqhash) que bien sûr on veut pas faire Hibernate."unproxify" ds domain...
        -la raison (pragmatique) pr laquelle on préfère des getters au pattern interest/inform
            -rexp de moi et de 1 ou 2 collegues
            -de mm que les exceptions, on fait à rome comme les romains: on throw
             (mais pas n'importe comment.., cf. ApplicativeValidations::validateApplicatively)
        -on accepte le WET validate(); à la fin de chq cstr
        -on accepte le private/pkg-private default cstr
        -pqoi j'accepte le @transactional et @autowired/component de spring ds mon layer domain
            -parce que de tte facon le DIP ne px marcher (en pratique) qu'avec du DI,
            et que ça vaut pas le coup de brancher des annnots domain, car pas intrusif
            (contrairement au mapping orm... qui lui doit rester strictement ds /infra! car vraiment intrusif++!)
                (argument supplémentaire qui marche souvent: si on accepte les annots jpa, pqoi pas hib/ehcache/jackson/...)
            (ce n'est pas l'approche "onion/clean architecture" puriste mais on s'en fout!)
        -documenter pqoi on met Serializable seulement au niveau le plus concret
        -VO: ce qui rest a VF pas fait par javac c'est surtt l'immutabilite
                -equalsverifier: j'aime pas comment ils changent les chps prives..
    -unification des exceptions 400? avec un test contrat pr les 2 cas
        -codes pr les errs de validation
    -pagination + criteria search?
    -e2e tst sans stubs
    -NPE vs validation: y'a encore un trou ds la raquette:
        public IiConference(ConferenceId id, MonetaryAmount budget, IiTalk... talks) throws InvalidObjectException {
                this(id, budget, Set.of(talks));
        }
        -->NPE si un des talks est null...
        -->de facon plus generale il faut VF ca a chq fois qu'on accepte un array mais aussi une collection! comme ds wires/checkNoNulls!
        -->rename defensiveCopy->defensiveCopyOrNull, introduire checkNoNulls, ...
        -->attention de ne pas tomber ds le pb des validators qui doivent s'exclurent les uns les autres --> VF ttes les nullites en mm tps




*****swagger*****
localhost:8080/swagger-ui.html

SPRING_PROFILES_ACTIVE=STUBBED_REPOS mvn spring-boot:run

curl -v -XGET -H "Content-Type: application/json;charset=UTF-8" -H "Accept: application/json;charset=UTF-8" "localhost:8080/example-app/conferences/3a370dbe-13d3-4a85-b60e-632a2f4c44b6"
    < HTTP/1.1 200
    < Content-Type: application/json;charset=UTF-8
    < Content-Length: 142
    < Date: Tue, 30 Apr 2019 20:44:56 GMT
    <
    * Connection #0 to host localhost left intact
    {"id":"3a370dbe-13d3-4a85-b60e-632a2f4c44b6","budget":1000,"totalCost":100,"talks":[{"id":"d837eff0-ec57-4e7f-aaa8-46cdda2cd9db","cost":100}]}

curl -v -XPOST -H "Content-Type: application/json;charset=UTF-8" -H "Accept: application/json;charset=UTF-8" --data '{"budget":1000, "costs":[400, 600]}'  "localhost:8080/example-app/conferences/"
    < HTTP/1.1 201
    < Content-Length: 0
    < Date: Tue, 30 Apr 2019 20:45:35 GMT
    <
    * Connection #0 to host localhost left intact


*****valid applicative TODO ds ScheduleConference (pr l'instant: 500)*****
-Exception provoquée par OpenApiValidationConfig
curl -v -XPOST -H "Content-Type: application/json;charset=UTF-8" -H "Accept: application/json;charset=UTF-8" --data '{"budget":1000, "costs":[400, -1]}'  "localhost:8080/example-app/conferences/"
    < HTTP/1.1 400
    < Content-Type: application/json;charset=UTF-8
    < Transfer-Encoding: chunked
    < Date: Tue, 30 Apr 2019 20:49:25 GMT
    < Connection: close
    <
    * Closing connection 0
    {"timestamp":"2019-04-30T20:49:25.117+0000","status":400,"error":"Bad Request","message":"{\n  \"messages\" : [ {\n    \"key\" : \"validation.request.body.schema.minimum\",\n    \"level\" : \"ERROR\",\n    \"message\" : \"[Path '/costs/1'] Numeric instance is lower than the required minimum (minimum: 0, found: -1)\",\n    \"context\" : {\n      \"requestPath\" : \"/example-app/conferences/\",\n      \"apiRequestContentType\" : \"*/*\",\n      \"location\" : \"REQUEST\",\n      \"requestMethod\" : \"POST\"\n    }\n  } ]\n}","path":"/example-app/conferences/"}

**VS**

-ValidationException
curl -v -XPOST -H "Content-Type: application/json;charset=UTF-8" -H "Accept: application/json;charset=UTF-8" --data '{"budget":1000, "costs":[400, 700]}'  "localhost:8080/example-app/conferences/"
    < HTTP/1.1 400
    < Content-Type: application/json;charset=UTF-8
    < Content-Length: 51
    < Date: Tue, 30 Apr 2019 20:47:11 GMT

    < Connection: close
    <
    * Closing connection 0
    XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX



++++++++++++++
curl -v -XGET -H "Content-Type: application/json;charset=UTF-8" -H "Accept: application/json;charset=UTF-8" "localhost:8080/example-app/conferences/3a370dbe-13d3-4a85-b60e-632a2f4c44b6"
curl -v -XPOST -H "Content-Type: application/json;charset=UTF-8" -H "Accept: application/json;charset=UTF-8" --data '{"budget":1000, "costs":[400, 600]}'  "localhost:8080/example-app/conferences/"
curl -v -XPOST -H "Content-Type: application/json;charset=UTF-8" -H "Accept: application/json;charset=UTF-8" --data '{"budget":1000, "costs":[400, -1]}'  "localhost:8080/example-app/conferences/"
curl -v -XPOST -H "Content-Type: application/json;charset=UTF-8" -H "Accept: application/json;charset=UTF-8" --data '{"budget":1000, "costs":[400, 700]}'  "localhost:8080/example-app/conferences/"
