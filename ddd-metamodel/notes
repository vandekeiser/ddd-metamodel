-N sujets:
    -equatable
    -modules + whitebox testing + test-dependencies
    -DDD metamodel (E/Vo/DDD)
    -DDD walking skel
    -DDD walking skel spring et tt

-IS_INSTANCE pas doc fausse? "also allows a derived VO to compare equal to its parent" VS "2 * isInstance"
-VO: ce qui rest a VF pas fait par javac c'est surtt l'immutabilite
-equalsverifier: j'aime pas comment ils changent les chps prives

ex:
requires java.logging;
--> split en blackbox
"[ERROR] the unnamed module
reads package com.pholser.junit.quickcheck.generator
from both junit.quickcheck.generators and junit.quickcheck.core"
-->peut pas utiliser le module path si split package ds 1 des libs..
jdeps -s out
https://stackoverflow.com/questions/53477690/properly-implementing-java-modules-in-a-maven-build-with-inter-module-test-depen/55635924#55635924


-valid VO + invariant entite


!!! aux sanity check avec 2*true
!!! au nommages VO restant dans OO
!!!factor @Property(tries = SANITY_CHECK_TRIALS)
!!!pqoi j'ai encore des vo avec avec a la fois:
     @Override
        protected List<Object> equalityCriteria() {
            return Arrays.asList(super.x, y);
        }

        @Override
        protected boolean canEqual(Equatable<?> that) {
            return that instanceof CeVO1B;
        }


mvn spring-boot:run
    [ERROR] No plugin found for prefix 'spring-boot' in the current project and in the plugin groups [org.apache.maven.plugins, org.codehaus.mojo] available from the repositories [local (/home/admistrateur/.m2/repository), central (https://repo.maven.apache.org/maven2)] -> [Help 1]

-mettre la valid a la sauce forax lambda
-documenter les //TODO eqh
-attention a la distribution de mon PBT elle a l'air un peu suspecte (on devrait pouvoir mettre moins d'iterations)
-(NB: E System.logger(), "since J9")
-VF ceci:
    -"Not part of the equals contract, but part of the Equatability.SAME_RUNTIME_CLASS contract."
    -equals_should_be_false_for_different_types


*********separer les tests relevant du contrat general de equals de ceux relevant du contrat specifique de chq Equatability*****
equals_should_be_false_for_different_types
-->
-choix du cas Sdc(SameDeclaredClass)
-split test en:
    -SdcSatisfiesGeneralEqualsAndHashcodeContractTest
    -SdcSatisfiesSpecificEquatabilityContractTest
    -FAIL:
        java.lang.AssertionError: [Expected only VOs of different declaredType to be different. Actual:
            p.x: SdcVO1B{[V1, null]}
            p.y: SdcVO1{[V1]}
            p.x.equals(p.y): false
            p.x.getDeclaredType(): class fr.cla.ddd.oo.exampleequatables.samedeclaredclass.SdcVO1
            p.y.getDeclaredType(): class fr.cla.ddd.oo.exampleequatables.samedeclaredclass.SdcVO1
            p.x.getDeclaredType().equals(p.y.getDeclaredType(): true]
        Expecting:
         <true>
        to be equal to:
         <false>
        but was not.
    -NORMAL car SdcVO1 et SdcVO1B ont le mm declaredType
        -car SdcVO1 n'a pas de cstr permettant de passer le type concret
        -cela peut-il cohabiter avec le constructeur "concret" de SdcVO1?
        -on recommence avec le cas plus facile de Src


SdcVO1B